{"ast":null,"code":"import { api } from './authService';\n\n// Helper function to convert frontend task to backend format\nconst mapFrontendTask = frontendTask => {\n  try {\n    const backendTask = {\n      ...frontendTask\n    };\n\n    // Convert completed boolean to status\n    if (frontendTask.completed !== undefined) {\n      backendTask.status = frontendTask.completed ? 'COMPLETED' : 'PENDING';\n      delete backendTask.completed;\n    }\n    return backendTask;\n  } catch (error) {\n    console.error('Error mapping frontend task:', error);\n    throw new Error('Failed to map task data');\n  }\n};\n\n// Helper function to convert backend task to frontend format\nconst mapBackendTask = backendTask => {\n  try {\n    return {\n      id: backendTask.id,\n      title: backendTask.title,\n      description: backendTask.description,\n      completed: backendTask.status === 'COMPLETED',\n      priority: backendTask.priority,\n      status: backendTask.status\n    };\n  } catch (error) {\n    console.error('Error mapping backend task:', error);\n    throw new Error('Failed to map task data');\n  }\n};\nexport const taskService = {\n  // Get all tasks\n  getAllTasks: async () => {\n    const response = await api.get('/tasks');\n    return response.data.map(mapBackendTask);\n  },\n  // Create new task\n  createTask: async task => {\n    const backendTask = mapFrontendTask(task);\n    const response = await api.post('/tasks', backendTask);\n    return mapBackendTask(response.data);\n  },\n  // Update task\n  updateTask: async (id, task) => {\n    const backendTask = mapFrontendTask(task);\n    const response = await api.put(`/tasks/${id}`, backendTask);\n    return mapBackendTask(response.data);\n  },\n  // Delete task\n  deleteTask: async id => {\n    await api.delete(`/tasks/${id}`);\n  }\n};","map":{"version":3,"names":["api","mapFrontendTask","frontendTask","backendTask","completed","undefined","status","error","console","Error","mapBackendTask","id","title","description","priority","taskService","getAllTasks","response","get","data","map","createTask","task","post","updateTask","put","deleteTask","delete"],"sources":["C:/Users/Administrator/Downloads/demo/frontend/src/services/taskService.ts"],"sourcesContent":["import { Task, CreateTaskRequest, UpdateTaskRequest } from '../types/Task';\r\nimport { api } from './authService';\r\n\r\n// Helper function to convert frontend task to backend format\r\nconst mapFrontendTask = (frontendTask: any): any => {\r\n  try {\r\n    const backendTask = { ...frontendTask };\r\n    \r\n    // Convert completed boolean to status\r\n    if (frontendTask.completed !== undefined) {\r\n      backendTask.status = frontendTask.completed ? 'COMPLETED' : 'PENDING';\r\n      delete backendTask.completed;\r\n    }\r\n    \r\n    return backendTask;\r\n  } catch (error) {\r\n    console.error('Error mapping frontend task:', error);\r\n    throw new Error('Failed to map task data');\r\n  }\r\n};\r\n\r\n// Helper function to convert backend task to frontend format\r\nconst mapBackendTask = (backendTask: any): Task => {\r\n  try {\r\n    return {\r\n      id: backendTask.id,\r\n      title: backendTask.title,\r\n      description: backendTask.description,\r\n      completed: backendTask.status === 'COMPLETED',\r\n      priority: backendTask.priority,\r\n      status: backendTask.status,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error mapping backend task:', error);\r\n    throw new Error('Failed to map task data');\r\n  }\r\n};\r\n\r\nexport const taskService = {\r\n  // Get all tasks\r\n  getAllTasks: async (): Promise<Task[]> => {\r\n    const response = await api.get('/tasks');\r\n    return response.data.map(mapBackendTask);\r\n  },\r\n\r\n  // Create new task\r\n  createTask: async (task: CreateTaskRequest): Promise<Task> => {\r\n    const backendTask = mapFrontendTask(task);\r\n    const response = await api.post('/tasks', backendTask);\r\n    return mapBackendTask(response.data);\r\n  },\r\n\r\n  // Update task\r\n  updateTask: async (id: number, task: UpdateTaskRequest): Promise<Task> => {\r\n    const backendTask = mapFrontendTask(task);\r\n    const response = await api.put(`/tasks/${id}`, backendTask);\r\n    return mapBackendTask(response.data);\r\n  },\r\n\r\n  // Delete task\r\n  deleteTask: async (id: number): Promise<void> => {\r\n    await api.delete(`/tasks/${id}`);\r\n  },\r\n};\r\n"],"mappings":"AACA,SAASA,GAAG,QAAQ,eAAe;;AAEnC;AACA,MAAMC,eAAe,GAAIC,YAAiB,IAAU;EAClD,IAAI;IACF,MAAMC,WAAW,GAAG;MAAE,GAAGD;IAAa,CAAC;;IAEvC;IACA,IAAIA,YAAY,CAACE,SAAS,KAAKC,SAAS,EAAE;MACxCF,WAAW,CAACG,MAAM,GAAGJ,YAAY,CAACE,SAAS,GAAG,WAAW,GAAG,SAAS;MACrE,OAAOD,WAAW,CAACC,SAAS;IAC9B;IAEA,OAAOD,WAAW;EACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIP,WAAgB,IAAW;EACjD,IAAI;IACF,OAAO;MACLQ,EAAE,EAAER,WAAW,CAACQ,EAAE;MAClBC,KAAK,EAAET,WAAW,CAACS,KAAK;MACxBC,WAAW,EAAEV,WAAW,CAACU,WAAW;MACpCT,SAAS,EAAED,WAAW,CAACG,MAAM,KAAK,WAAW;MAC7CQ,QAAQ,EAAEX,WAAW,CAACW,QAAQ;MAC9BR,MAAM,EAAEH,WAAW,CAACG;IACtB,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG;EACzB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAA6B;IACxC,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACV,cAAc,CAAC;EAC1C,CAAC;EAED;EACAW,UAAU,EAAE,MAAOC,IAAuB,IAAoB;IAC5D,MAAMnB,WAAW,GAAGF,eAAe,CAACqB,IAAI,CAAC;IACzC,MAAML,QAAQ,GAAG,MAAMjB,GAAG,CAACuB,IAAI,CAAC,QAAQ,EAAEpB,WAAW,CAAC;IACtD,OAAOO,cAAc,CAACO,QAAQ,CAACE,IAAI,CAAC;EACtC,CAAC;EAED;EACAK,UAAU,EAAE,MAAAA,CAAOb,EAAU,EAAEW,IAAuB,KAAoB;IACxE,MAAMnB,WAAW,GAAGF,eAAe,CAACqB,IAAI,CAAC;IACzC,MAAML,QAAQ,GAAG,MAAMjB,GAAG,CAACyB,GAAG,CAAC,UAAUd,EAAE,EAAE,EAAER,WAAW,CAAC;IAC3D,OAAOO,cAAc,CAACO,QAAQ,CAACE,IAAI,CAAC;EACtC,CAAC;EAED;EACAO,UAAU,EAAE,MAAOf,EAAU,IAAoB;IAC/C,MAAMX,GAAG,CAAC2B,MAAM,CAAC,UAAUhB,EAAE,EAAE,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}